####
# Copyright (c) 2010 Tau Productions Inc.
#
####

[netconfig]
# copy into your buildout.cfg and modify
zope-hostport		= localhost:8080

#[svnserver]
# copy into your buildout.cfg and modify
#hostname		= svn1.zeomega.org
#branch			= https://${svnserver:hostname}/svn/jiva3/branches/Products_Jiva5_SRE

#[gitserver]
# copy into your buildout.cfg and modify
#hostname		= svn1.zeomega.org
#branch			= https://${svnserver:hostname}/svn/jiva3/branches/Products_Jiva5_SRE

[pkgserver]
# copy into your buildout.cfg and modify
hostname		= pypi.python.org
username		=
password		=
fullurl			= http://${pkgserver:hostname}
#fullurl			= https://${pkgserver:username}:${pkgserver:password}@${pkgserver:hostname}

[buildout]

extensions		= mr.developer
#			  A zc.buildout extension which makes it easier to
#			  work with buildouts containing lots of packages of
#			  which you only want to develop on one or a few at a
#			  time.

sources			= sources
#			  The name of a buildout section which lists the
#			  repository information of your packages.

auto-checkout		= *
#			  Specifies package names to be checked out during a
#                         build.  Packages already checked out are
#                         skipped. You can use * as a wild card for all
#                         packages in sources.

#index			= ${pkgserver:fullurl}
#index			= 
find-links		=
			  ${buildout:directory}/othereggs/
#			  /var/tmp/buildout/eggs/

#			  Control from where software is obtained, to be sure
#			  nothing leaks in from the public Internet for our
#			  proprietary development.

allow-picked-versions	= false
prefer-final		= true
newest			= true
#			  With the above settings, establish strong control over
#			  the versions of things used

log-level		= DEBUG
#verbosity		= 5
#			  Establish logging levels of Buildout operation

relative-paths		= true
unzip			= true
#			  Buildout settings also inherited by various recipes


######################################################################
[Zope2_instance]
#
recipe	= plone.recipe.zope2instance

control-script		= instance
user			= admin:admin
http-address		= ${netconfig:zope-hostport}
debug-mode		= off
verbose-security	= off
zodb-cache-size		= 5000
zeo-client		= false
zserver-threads		= 4

shared-blob		= on
blob-storage		= ${buildout:directory}/var/blobstorage

event-log		= ${buildout:directory}/logs/zope-error.log
z2-log			= ${buildout:directory}/logs/zope-access.log
z2-log-level		= WARN

eggs			= ${buildout:eggs}
#			  The set of eggs visible to the Zope2 instance

products		= ${buildout:directory}/Products
#			  Where to find Zope Products to be available within the ZMI

extra-paths		=
#			  ${buildout:directory}/lib
#			  Additional non-egg, non-Product modules of Python code

#			  Install ZCML slugs for the packages listed,
#			  separated by whitespace. You can specify the type of
#			  slug by appending '-' and the type of slug you want
#			  to create. The valid types are configure, overrides
#			  and meta. Some examples: my.package-overrides
#			  my.package-meta


#FIXME: use autoslugging !!!                                                                          
zcml			=
			  Products.Five-meta
#			  z3c.autoinclude-meta

#			Extra ZCML statements to include in the generated site.zcml file.
zcml-additional		=
#			  When you want to include a Zope-based package in
#			  your application, you have to repeat yourself in two
#			  places: you have to add the package itself (in a
#			  setup.py, buildout, etc) and you also have to
#			  include its ZCML with an <include> directive or a
#			  package-includes slug. Because you have to repeat
#			  yourself, you can easily make an error where you add
#			  a new package but forget to include its ZCML.
#
#			  z3c.autoinclude lets you circumvent this error-prone
#			  process with automatic detection and inclusion of
#			  ZCML files.

enable-product-installation = on


######################################################################
[Zope2_devinstance]
#
<=	Zope2_instance

control-script		= devinstance
debug-mode		= on
verbose-security	= on
zserver-threads		= 1


######################################################################
[allsource]
#
# Creates a unified directory structure of all packages that mirrors the
# actual Python namespaces.  This is in order to ease navigation among the
# source when it is often scattered among .zip files and cache directories.
#
# Note that this collects not only the source of eggs explicitly given but
# also of any dependencies they may declare in their setup.py file.
#
recipe	= collective.recipe.omelette

eggs			= Zope2 ${Zope2_instance:eggs}
products		= ${Zope2_instance:products}
packages		=
ignores			= setuptools wordaxe


######################################################################
[Python266_under_Linux]
#
# Construct a custom version of Python, for use with all other recipes.  A
# custom version is necessary to control the packages installed in the
# interpreter and also to use Unicode two-byte characters, to match the
# Unicode choice of the mxODBC package from eGenix, provided in binary-only
# format.
#
# Uses the 'configure-make-make-install' buildout recipe to construct the part
# from the standard distribution tarball.

recipe	= zc.recipe.cmmi

url			= http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgz
extra_options		=
			  --prefix ${buildout:parts-directory}/Python266_under_Linux
			  --enable-unicode=ucs2

executable		= ${buildout:parts-directory}/Python266_under_Linux/bin/python


######################################################################
[tests]
#
# Generates zope.testing test-runner scripts for testing a collection of
# eggs. The eggs must already be installed by some other part, using the
# zc.recipe.egg recipe.
#
recipe	= zc.recipe.testrunner

script			= test
defaults		= ['--tests-pattern', '^f?tests$', '-v']
eggs			= ${buildout:eggs}
